import telebot
from telebot import types
import random
from abc import ABC, abstractmethod

bot = telebot.TeleBot('7588340886:AAHVXt-tCySj7T1CKS4ZbpEmMMAiCwU5HQE')

last_message_id = None

anime_list = {
    'Shonen': ['Naruto', 'One Piece', 'Dragon Ball Z', 'My Hero Academia'],
    'Seinen': ['Attack on Titan', 'Death Note', 'Tokyo Ghoul', 'Fullmetal Alchemist'],
    'Shojo': ['Sailor Moon', 'Fruits Basket', 'Ouran High School Host Club', 'Cardcaptor Sakura'],
    'Isekai': ['Sword Art Online', 'Re:Zero', 'No Game No Life', 'That Time I Got Reincarnated as a Slime']
}

upcoming_anime = {
    'Demon Slayer: Kimetsu no Yaiba': 'C:/Users/–ö–∏—Ä–∏–ª–ª/Desktop/tg bot/–§–æ—Ç–∫–∏ –¥–ª—è –±–æ—Ç–∞/klinok.jpg',
    'Jujutsu Kaisen Season 2': 'C:/Users/–ö–∏—Ä–∏–ª–ª/Desktop/tg bot/–§–æ—Ç–∫–∏ –¥–ª—è –±–æ—Ç–∞/–º–∞–≥–±–∏—Ç–≤.jpg',
    'Bleach: Thousand-Year Blood War': 'C:/Users/–ö–∏—Ä–∏–ª–ª/Desktop/tg bot/–§–æ—Ç–∫–∏ –¥–ª—è –±–æ—Ç–∞/bleach.jpg',
    'Attack on Titan: Final Season Part 3': 'C:/Users/–ö–∏—Ä–∏–ª–ª/Desktop/tg bot/–§–æ—Ç–∫–∏ –¥–ª—è –±–æ—Ç–∞/attack.jpg'
}

genre_descriptions = {
    'Shonen': '–ê–Ω–∏–º–µ –¥–ª—è –º–æ–ª–æ–¥–µ–∂–∏ —Å –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è–º–∏ –∏ –±–æ–µ–≤—ã–º–∏ –∏—Å–∫—É—Å—Å—Ç–≤–∞–º–∏.',
    'Seinen': '–ê–Ω–∏–º–µ –¥–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö —Å –≥–ª—É–±–æ–∫–∏–º–∏ —Ç–µ–º–∞–º–∏.',
    'Shojo': '–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –∏ –¥—Ä–∞–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –∂–µ–Ω—â–∏–Ω.',
    'Isekai': '–ì–µ—Ä–æ–π –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –¥—Ä—É–≥–æ–π –º–∏—Ä —Å –º–∞–≥–∏–µ–π –∏ —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–æ–π.'
}

# –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
class BotStartupLogger(ABC):
    @abstractmethod
    def log_startup(self):
        pass

# –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Å–∞ –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
class BotLogger(BotStartupLogger):
    @staticmethod
    def log_startup():
        print("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")

# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∞—Å—Å–∏–≤–∞–º–∏ –æ–±—ä–µ–∫—Ç–æ–≤
class Anime:
    def __init__(self, name, genre):
        self.name = name
        self.genre = genre

    def __repr__(self):
        return f"{self.name} ({self.genre})"


class AnimeCollection:
    def __init__(self, anime_list):
        self.anime_list = anime_list
        self.anime_grid = []

    def add_anime_to_grid(self, row):
        self.anime_grid.append(row)

    def find_max_attribute_anime(self):
        max_anime = None
        for row in self.anime_grid:
            for anime in row:
                if not max_anime or len(anime.name) > len(max_anime.name):
                    max_anime = anime
        return max_anime


# –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å —Å –º–µ—Ç–æ–¥–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ –Ω–∞—Å–ª–µ–¥—É–µ–º—ã—Ö –∫–ª–∞—Å—Å–∞—Ö
class BotHandler(ABC):

    @abstractmethod
    def handle_message(self, message):
        pass

    @staticmethod
    def create_back_button():
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        back_button = types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
        markup.add(back_button)
        return markup

    @staticmethod
    def delete_previous_message(message):
        global last_message_id
        if last_message_id:
            try:
                bot.delete_message(message.chat.id, last_message_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        last_message_id = message.message_id

    #raise –∏ finally
    @staticmethod
    def handle_exception():
        try:
            raise ValueError("–ü—Ä–∏–º–µ—Ä –æ—à–∏–±–∫–∏!")
        except ValueError as e:
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        finally:
            print("–≠—Ç–æ—Ç –±–ª–æ–∫ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –≤—Å–µ–≥–¥–∞.")


# –ú–µ–Ω—é
class MenuHandler(BotHandler):
    @staticmethod
    @bot.message_handler(commands=['start'])
    def send_welcome(message):
        BotHandler.delete_previous_message(message)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        item1 = types.KeyboardButton("üîç –†–µ–∫–∏ –∞–Ω–∏–º–µ")
        item2 = types.KeyboardButton("üí• –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∞–Ω–∏–º–µ")
        item3 = types.KeyboardButton("üé≤ –†–∞–Ω–¥–æ–º–Ω–æ–µ –∞–Ω–∏–º–µ")
        item4 = types.KeyboardButton("üé≠ –ñ–∞–Ω—Ä—ã")
        item5 = types.KeyboardButton("‚è≥ –û–∂–∏–¥–∞–µ–º—ã–µ")
        item6 = types.KeyboardButton("üìö –û –∂–∞–Ω—Ä–∞—Ö")
        item7 = types.KeyboardButton("‚ù§Ô∏è –õ—é–±–∏–º–æ–µ –∞–Ω–∏–º–µ")
        item8 = types.KeyboardButton("üìù –û—Ç–∑—ã–≤")
        markup.add(item1, item2, item3, item4, item5, item6, item7, item8)
        bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ —Ç–µ–º–µ –∞–Ω–∏–º–µ. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=markup)

    @staticmethod
    @bot.message_handler(func=lambda message: message.text == "üîô –ù–∞–∑–∞–¥")
    def back_to_menu(message):
        BotHandler.delete_previous_message(message)
        MenuHandler.send_welcome(message)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "üîç –†–µ–∫–∏ –∞–Ω–∏–º–µ"
class RecommendedAnimeHandler:
    @staticmethod
    @bot.message_handler(func=lambda message: message.text == "üîç –†–µ–∫–∏ –∞–Ω–∏–º–µ")
    def send_recommendations(message):
        BotHandler.delete_previous_message(message)
        bot.send_message(message.chat.id,
                         "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∞–Ω–∏–º–µ:\n1. Naruto\n2. One Piece\n3. Attack on Titan\n4. My Hero Academia\n5. Fullmetal Alchemist",
                         reply_markup=BotHandler.create_back_button())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∂–∞–Ω—Ä–æ–≤
class GenreHandler:
    @staticmethod
    @bot.message_handler(func=lambda message: message.text == "üé≠ –ñ–∞–Ω—Ä—ã")
    def ask_genre(message):
        BotHandler.delete_previous_message(message)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        item1 = types.KeyboardButton("Shonen")
        item2 = types.KeyboardButton("Seinen")
        item3 = types.KeyboardButton("Shojo")
        item4 = types.KeyboardButton("Isekai")
        back_button = types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
        markup.add(item1, item2, item3, item4, back_button)
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä –∞–Ω–∏–º–µ:", reply_markup=markup)

    @staticmethod
    @bot.message_handler(func=lambda message: message.text in ["Shonen", "Seinen", "Shojo", "Isekai"])
    def send_anime_by_genre(message):
        BotHandler.delete_previous_message(message)
        genre = message.text
        recommended_animes = anime_list[genre]
        markup = BotHandler.create_back_button()
        bot.send_message(message.chat.id, f"–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –∞–Ω–∏–º–µ –¥–ª—è –∂–∞–Ω—Ä–∞ {genre}:\n" + "\n".join(recommended_animes),
                         reply_markup=markup)

    @staticmethod
    @bot.message_handler(func=lambda message: message.text == "üîô –ù–∞–∑–∞–¥")
    def back_to_main_menu(message):
        BotHandler.delete_previous_message(message)
        MenuHandler.send_welcome(message)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∞–Ω–∏–º–µ
class RandomAnimeHandler:
    @staticmethod
    @bot.message_handler(func=lambda message: message.text == "üé≤ –†–∞–Ω–¥–æ–º–Ω–æ–µ –∞–Ω–∏–º–µ")
    def send_random_anime(message):
        BotHandler.delete_previous_message(message)
        random_genre = random.choice(list(anime_list.keys()))
        random_anime = random.choice(anime_list[random_genre])
        bot.send_message(message.chat.id, f"–°–ª—É—á–∞–π–Ω–æ–µ –∞–Ω–∏–º–µ: {random_anime} \n –ñ–∞–Ω—Ä–∞: {random_genre}",
                         reply_markup=BotHandler.create_back_button())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∞–Ω–∏–º–µ
class PopularAnimeHandler:
    @staticmethod
    @bot.message_handler(func=lambda message: message.text == "üí• –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∞–Ω–∏–º–µ")
    def send_popular_anime(message):
        BotHandler.delete_previous_message(message)
        popular_animes = "\n".join(["Naruto", "One Piece", "Attack on Titan", "My Hero Academia", "Demon Slayer"])
        bot.send_message(message.chat.id, f"–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∞–Ω–∏–º–µ:\n{popular_animes}", reply_markup=BotHandler.create_back_button())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–∂–∏–¥–∞–µ–º—ã—Ö –∞–Ω–∏–º–µ
class UpcomingAnimeHandler:
    @staticmethod
    @bot.message_handler(func=lambda message: message.text == "‚è≥ –û–∂–∏–¥–∞–µ–º—ã–µ")
    def send_upcoming_anime(message):
        try:
            BotHandler.delete_previous_message(message)
            response = "–°–∞–º—ã–µ –æ–∂–∏–¥–∞–µ–º—ã–µ –∞–Ω–∏–º–µ:\n"
            for anime, image_path in upcoming_anime.items():
                response += f"{anime}\n"
                try:
                    with open(image_path, 'rb') as image:
                        bot.send_photo(message.chat.id, image, caption=anime,
                                       reply_markup=BotHandler.create_back_button())
                except Exception as e:
                    bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è {anime}: {str(e)}")
            bot.send_message(message.chat.id, response, reply_markup=BotHandler.create_back_button())
        except Exception as e:
            bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}", reply_markup=BotHandler.create_back_button())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∂–∞–Ω—Ä–∞—Ö
class GenreInfoHandler:
    @staticmethod
    @bot.message_handler(func=lambda message: message.text == "üìö –û –∂–∞–Ω—Ä–∞—Ö")
    def send_genre_info(message):
        BotHandler.delete_previous_message(message)
        genre_info = "\n".join([f"{genre}: {description}" for genre, description in genre_descriptions.items()])
        bot.send_message(message.chat.id, f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∂–∞–Ω—Ä–∞—Ö:\n{genre_info}", reply_markup=BotHandler.create_back_button())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±–∏–º–æ–≥–æ –∞–Ω–∏–º–µ
class FavoriteAnimeHandler:
    @staticmethod
    @bot.message_handler(func=lambda message: message.text == "‚ù§Ô∏è –õ—é–±–∏–º–æ–µ –∞–Ω–∏–º–µ")
    def ask_favorite_anime(message):
        BotHandler.delete_previous_message(message)
        bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –ª—é–±–∏–º–æ–≥–æ –∞–Ω–∏–º–µ:", reply_markup=BotHandler.create_back_button())
        bot.register_next_step_handler(message, FavoriteAnimeHandler.save_favorite_anime)

    @staticmethod
    def save_favorite_anime(message):
        BotHandler.delete_previous_message(message)
        favorite_anime = message.text
        bot.send_message(message.chat.id, f"–í–∞—à–µ –ª—é–±–∏–º–æ–µ –∞–Ω–∏–º–µ: {favorite_anime}", reply_markup=BotHandler.create_back_button())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∑—ã–≤–æ–≤
class FeedbackHandler:
    @staticmethod
    @bot.message_handler(func=lambda message: message.text == "üìù –û—Ç–∑—ã–≤")
    def ask_feedback(message):
        BotHandler.delete_previous_message(message)
        bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤!", reply_markup=BotHandler.create_back_button())
        bot.register_next_step_handler(message, FeedbackHandler.save_feedback)

    @staticmethod
    def save_feedback(message):
        BotHandler.delete_previous_message(message)
        user_name = message.from_user.username if message.from_user.username else f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id}"
        feedback_text = message.text
        print(f"–û—Ç–∑—ã–≤ –æ—Ç {user_name}: {feedback_text}")
        bot.send_message(message.chat.id, f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤, {user_name}!",
                         reply_markup=BotHandler.create_back_button())

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
if __name__ == '__main__':
    BotLogger.log_startup()
bot.polling(none_stop=True)